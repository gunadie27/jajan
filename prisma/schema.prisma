generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Outlet {
  id              String           @id @default(uuid())
  name            String           @unique
  address         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  code            String?          @unique
  cashierSessions CashierSession[]
  expenses        Expense[]
  products        Product[]        @relation("OutletProducts")
  transactions    Transaction[]
  users           User[]           @relation("OutletUsers")
}

model User {
  id        String           @id @default(uuid())
  name      String
  username  String           @unique
  email     String           @unique
  password  String
  role      String
  outletId  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  sessions  CashierSession[]
  outlet    Outlet?          @relation("OutletUsers", fields: [outletId], references: [id])
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(100)
  products Product[]
  discountRules DiscountRule[]
}

model Product {
  id         String           @id @default(uuid())
  name       String           @unique
  imageUrl   String
  dataAiHint String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  outletId   String?
  categoryId Int
  orderItems OrderItem[]
  category   ProductCategory  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  outlet     Outlet?          @relation("OutletProducts", fields: [outletId], references: [id])
  variants   ProductVariant[]
  discountRules DiscountRule[]
}

model ProductVariant {
  id         String      @id @default(uuid())
  productId  String
  name       String
  price      Float
  cogs       Float
  stock      Int
  trackStock Boolean     @default(true)
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name])
}

model Transaction {
  id                String          @id @default(uuid())
  date              DateTime        @default(now())
  total             Float
  outletName        String
  orderChannel      String
  paymentMethod     String
  cashReceived      Float?
  change            Float?
  customerId        String?
  customerName      String?
  cashierSessionId  String?
  outletId          String
  transactionNumber String?         @unique
  items             OrderItem[]
  cashierSession    CashierSession? @relation(fields: [cashierSessionId], references: [id])
  customer          Customer?       @relation(fields: [customerId], references: [id])
  outlet            Outlet          @relation(fields: [outletId], references: [id])
}

model OrderItem {
  id            String         @id @default(uuid())
  transactionId String
  productId     String
  variantId     String
  quantity      Int
  price         Float
  product       Product        @relation(fields: [productId], references: [id])
  transaction   Transaction    @relation(fields: [transactionId], references: [id])
  variant       ProductVariant @relation(fields: [variantId], references: [id])
}

model Expense {
  id               String          @id @default(uuid())
  date             DateTime        @default(now())
  description      String
  amount           Float
  category         String
  outletName       String
  outletId         String
  cashierSessionId String?
  cashierSession   CashierSession? @relation(fields: [cashierSessionId], references: [id])
  outlet           Outlet          @relation(fields: [outletId], references: [id])
}

model ExpenseCategory {
  id   String @id @default(uuid())
  name String @unique
}

model Customer {
  id                   String        @id @default(uuid())
  name                 String
  phoneNumber          String        @unique
  isMember             Boolean       @default(true)
  memberId             String        @unique @default(uuid())
  lastUsedDiscount     DateTime?
  lastDiscountDate     DateTime?     // Tanggal terakhir menggunakan diskon member
  firstTransactionDate DateTime
  lastTransactionDate  DateTime
  totalSpent           Float
  transactionIds       String[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  transactions         Transaction[]
}

model CashierSession {
  id             String        @id @default(uuid())
  userId         String
  userName       String
  outletId       String
  outletName     String
  startTime      DateTime      @default(now())
  endTime        DateTime?
  initialCash    Float
  finalCash      Float?
  calculatedCash Float?
  difference     Float?
  status         String
  outlet         Outlet        @relation(fields: [outletId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  expenses       Expense[]
  transactions   Transaction[]
}

model PlatformSetting {
  id      String @id @default(uuid())
  channel String @unique
  markup  Float
}

model DiscountRule {
  id            String           @id @default(uuid())
  name          String
  isActive      Boolean          @default(true)
  discountType  DiscountType
  discountValue Float
  maxDiscountAmount Float?       // Maksimal potongan untuk diskon persentase
  appliesTo     DiscountAudience
  minPurchase   Float?
  bundledProductIds String[]     // Untuk diskon bundling produk
  validFrom     DateTime?
  validUntil    DateTime?
  scope         DiscountScope
  productId     String?
  product       Product?         @relation(fields: [productId], references: [id], onDelete: SetNull)
  categoryId    Int?
  category      ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum DiscountAudience {
  ALL
  MEMBER_ONLY
  NON_MEMBER_ONLY
}

enum DiscountScope {
  ENTIRE_ORDER
  SPECIFIC_PRODUCT
  SPECIFIC_CATEGORY
}
